
/*
 *  Copyright (C) 2004  The Concord Consortium, Inc.,
 *  10 Concord Crossing, Concord, MA 01741
 *
 *  Web Site: http://www.concord.org
 *  Email: info@concord.org
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.concord.ftdi;

class FtdiSerialWrapperJNI {
  public final static native void set_FTClassicPort_handle(long jarg1, long jarg2);
  public final static native long get_FTClassicPort_handle(long jarg1);
  public final static native void set_FTClassicPort_status(long jarg1, long jarg2);
  public final static native long get_FTClassicPort_status(long jarg1);
  public final static native void FTClassicPort_open(long jarg1, int jarg2) throws java.io.IOException;
  public final static native void FTClassicPort_close(long jarg1) throws java.io.IOException;
  public final static native long FTClassicPort_read(long jarg1, byte[] jarg2, long jarg3) throws java.io.IOException;
  public final static native long FTClassicPort_write(long jarg1, byte[] jarg2, long jarg3) throws java.io.IOException;
  public final static native void FTClassicPort_setBaudRate(long jarg1, long jarg2) throws java.io.IOException;
  public final static native void FTClassicPort_setDataCharacteristics(long jarg1, short jarg2, short jarg3, short jarg4) throws java.io.IOException;
  public final static native void FTClassicPort_setFlowControl(long jarg1, int jarg2, short jarg3, short jarg4) throws java.io.IOException;
  public final static native void FTClassicPort_resetDevice(long jarg1) throws java.io.IOException;
  public final static native void FTClassicPort_setDtr(long jarg1) throws java.io.IOException;
  public final static native void FTClassicPort_clrDtr(long jarg1) throws java.io.IOException;
  public final static native void FTClassicPort_setRts(long jarg1) throws java.io.IOException;
  public final static native void FTClassicPort_crRts(long jarg1) throws java.io.IOException;
  public final static native void FTClassicPort_setTimeouts(long jarg1, long jarg2, long jarg3) throws java.io.IOException;
  public final static native void FTClassicPort_resetPort(long jarg1) throws java.io.IOException;
  public final static native long new_FTClassicPort();
  public final static native void delete_FTClassicPort(long jarg1);
}
